# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from documents.v1alpha import web_publishing_pb2 as documents_dot_v1alpha_dot_web__publishing__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class WebPublishingStub(object):
    """Service exposed by the local application backend for
    configuring and managing remote Mintter Sites.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSite = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebPublishing/AddSite',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.AddSiteRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteConfig.FromString,
                )
        self.RemoveSite = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebPublishing/RemoveSite',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.RemoveSiteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListSites = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebPublishing/ListSites',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesResponse.FromString,
                )
        self.ListWebPublicationRecords = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebPublishing/ListWebPublicationRecords',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsResponse.FromString,
                )


class WebPublishingServicer(object):
    """Service exposed by the local application backend for
    configuring and managing remote Mintter Sites.
    """

    def AddSite(self, request, context):
        """Adds a site configuration to the local app backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveSite(self, request, context):
        """Removes site configuration from the local app backend.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSites(self, request, context):
        """Lists configured sites.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWebPublicationRecords(self, request, context):
        """Lists web publication records for a given document among the configured web sites.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebPublishingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSite': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSite,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.AddSiteRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteConfig.SerializeToString,
            ),
            'RemoveSite': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveSite,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.RemoveSiteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListSites': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSites,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesResponse.SerializeToString,
            ),
            'ListWebPublicationRecords': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWebPublicationRecords,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.mintter.documents.v1alpha.WebPublishing', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WebPublishing(object):
    """Service exposed by the local application backend for
    configuring and managing remote Mintter Sites.
    """

    @staticmethod
    def AddSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebPublishing/AddSite',
            documents_dot_v1alpha_dot_web__publishing__pb2.AddSiteRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.SiteConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebPublishing/RemoveSite',
            documents_dot_v1alpha_dot_web__publishing__pb2.RemoveSiteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSites(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebPublishing/ListSites',
            documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.ListSitesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWebPublicationRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebPublishing/ListWebPublicationRecords',
            documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationRecordsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class WebSiteStub(object):
    """API exposed by the remote server that allows
    publishing Mintter Documents to serve them on the Web.
    The server implementing this API is responsible for authenticating
    callers for its administrative RPCs.
    This API is also exposed by the local application backend, which would act
    as a proxy to the remote web server, handling the authentication with its device private key.
    The local application backend would require a special metadata header specifying the hostname
    of the Mintter Site to proxy the request to.

    Metadata Header: x-mintter-site-hostname
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateInviteToken = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/CreateInviteToken',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.CreateInviteTokenRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.InviteToken.FromString,
                )
        self.RedeemInviteToken = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/RedeemInviteToken',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenResponse.FromString,
                )
        self.GetSiteInfo = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/GetSiteInfo',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetSiteInfoRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.FromString,
                )
        self.UpdateSiteInfo = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/UpdateSiteInfo',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.UpdateSiteInfoRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.FromString,
                )
        self.ListMembers = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/ListMembers',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersResponse.FromString,
                )
        self.GetMember = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/GetMember',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetMemberRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.Member.FromString,
                )
        self.DeleteMember = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/DeleteMember',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.DeleteMemberRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.PublishDocument = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/PublishDocument',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentResponse.FromString,
                )
        self.UnpublishDocument = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/UnpublishDocument',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentResponse.FromString,
                )
        self.ListWebPublications = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/ListWebPublications',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsResponse.FromString,
                )
        self.GetPath = channel.unary_unary(
                '/com.mintter.documents.v1alpha.WebSite/GetPath',
                request_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetPathRequest.SerializeToString,
                response_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetPathResponse.FromString,
                )


class WebSiteServicer(object):
    """API exposed by the remote server that allows
    publishing Mintter Documents to serve them on the Web.
    The server implementing this API is responsible for authenticating
    callers for its administrative RPCs.
    This API is also exposed by the local application backend, which would act
    as a proxy to the remote web server, handling the authentication with its device private key.
    The local application backend would require a special metadata header specifying the hostname
    of the Mintter Site to proxy the request to.

    Metadata Header: x-mintter-site-hostname
    """

    def CreateInviteToken(self, request, context):
        """Creates a new invite token for registering a new member.
        Protected. Must require authentication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedeemInviteToken(self, request, context):
        """Redeems a previously created invite token to register a new member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSiteInfo(self, request, context):
        """Gets public-facing site information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSiteInfo(self, request, context):
        """Updates public-facing site information. Doesn't support partial updates,
        hence all the fields must be provided.
        Protected. Must require authentication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMembers(self, request, context):
        """Lists registered members on the site.
        May be protected or public depending on the privacy policies of the web site.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMember(self, request, context):
        """Gets information about a specific member.
        May be protected or public depending on the privacy policies of the web site.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMember(self, request, context):
        """Deletes an existing member.
        Protected. Must require authentication.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishDocument(self, request, context):
        """Publishes a Mintter Document on the remote web server along with any supporting materials.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnpublishDocument(self, request, context):
        """Unpublishes a previously published Document.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWebPublications(self, request, context):
        """list all the published documents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPath(self, request, context):
        """Get the document published at a given path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebSiteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateInviteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInviteToken,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.CreateInviteTokenRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.InviteToken.SerializeToString,
            ),
            'RedeemInviteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RedeemInviteToken,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenResponse.SerializeToString,
            ),
            'GetSiteInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSiteInfo,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetSiteInfoRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.SerializeToString,
            ),
            'UpdateSiteInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSiteInfo,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.UpdateSiteInfoRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.SerializeToString,
            ),
            'ListMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMembers,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersResponse.SerializeToString,
            ),
            'GetMember': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMember,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetMemberRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.Member.SerializeToString,
            ),
            'DeleteMember': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMember,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.DeleteMemberRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PublishDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishDocument,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentResponse.SerializeToString,
            ),
            'UnpublishDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.UnpublishDocument,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentResponse.SerializeToString,
            ),
            'ListWebPublications': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWebPublications,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsResponse.SerializeToString,
            ),
            'GetPath': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPath,
                    request_deserializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetPathRequest.FromString,
                    response_serializer=documents_dot_v1alpha_dot_web__publishing__pb2.GetPathResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.mintter.documents.v1alpha.WebSite', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WebSite(object):
    """API exposed by the remote server that allows
    publishing Mintter Documents to serve them on the Web.
    The server implementing this API is responsible for authenticating
    callers for its administrative RPCs.
    This API is also exposed by the local application backend, which would act
    as a proxy to the remote web server, handling the authentication with its device private key.
    The local application backend would require a special metadata header specifying the hostname
    of the Mintter Site to proxy the request to.

    Metadata Header: x-mintter-site-hostname
    """

    @staticmethod
    def CreateInviteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/CreateInviteToken',
            documents_dot_v1alpha_dot_web__publishing__pb2.CreateInviteTokenRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.InviteToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedeemInviteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/RedeemInviteToken',
            documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.RedeemInviteTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSiteInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/GetSiteInfo',
            documents_dot_v1alpha_dot_web__publishing__pb2.GetSiteInfoRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSiteInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/UpdateSiteInfo',
            documents_dot_v1alpha_dot_web__publishing__pb2.UpdateSiteInfoRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.SiteInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/ListMembers',
            documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.ListMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/GetMember',
            documents_dot_v1alpha_dot_web__publishing__pb2.GetMemberRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.Member.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/DeleteMember',
            documents_dot_v1alpha_dot_web__publishing__pb2.DeleteMemberRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/PublishDocument',
            documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.PublishDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UnpublishDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/UnpublishDocument',
            documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.UnpublishDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWebPublications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/ListWebPublications',
            documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.ListWebPublicationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPath(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.documents.v1alpha.WebSite/GetPath',
            documents_dot_v1alpha_dot_web__publishing__pb2.GetPathRequest.SerializeToString,
            documents_dot_v1alpha_dot_web__publishing__pb2.GetPathResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
