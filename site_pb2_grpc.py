# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import site_pb2 as site__pb2


class SiteStub(object):
    """Site API service allows to configure a remote Mintter Site.
    The server exposing this API should take care about authenticating the caller.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateInviteToken = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/CreateInviteToken',
                request_serializer=site__pb2.CreateInviteTokenRequest.SerializeToString,
                response_deserializer=site__pb2.InviteToken.FromString,
                )
        self.RedeemInviteToken = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/RedeemInviteToken',
                request_serializer=site__pb2.RedeemInviteTokenRequest.SerializeToString,
                response_deserializer=site__pb2.RedeemInviteTokenResponse.FromString,
                )
        self.GetSiteInfo = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/GetSiteInfo',
                request_serializer=site__pb2.GetSiteInfoRequest.SerializeToString,
                response_deserializer=site__pb2.SiteInfo.FromString,
                )
        self.UpdateSiteInfo = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/UpdateSiteInfo',
                request_serializer=site__pb2.UpdateSiteInfoRequest.SerializeToString,
                response_deserializer=site__pb2.SiteInfo.FromString,
                )
        self.ListMembers = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/ListMembers',
                request_serializer=site__pb2.ListMembersRequest.SerializeToString,
                response_deserializer=site__pb2.ListMembersResponse.FromString,
                )
        self.GetMember = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/GetMember',
                request_serializer=site__pb2.GetMemberRequest.SerializeToString,
                response_deserializer=site__pb2.Member.FromString,
                )
        self.DeleteMember = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/DeleteMember',
                request_serializer=site__pb2.DeleteMemberRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListBlockedAccounts = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/ListBlockedAccounts',
                request_serializer=site__pb2.ListBlockedAccountsRequest.SerializeToString,
                response_deserializer=site__pb2.ListBlockedAccountsResponse.FromString,
                )
        self.Publish = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/Publish',
                request_serializer=site__pb2.PublishRequest.SerializeToString,
                response_deserializer=site__pb2.PublishResponse.FromString,
                )
        self.Unpublish = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/Unpublish',
                request_serializer=site__pb2.UnpublishRequest.SerializeToString,
                response_deserializer=site__pb2.UnpublishResponse.FromString,
                )
        self.ListWebPublications = channel.unary_unary(
                '/com.mintter.site.v1alpha.Site/ListWebPublications',
                request_serializer=site__pb2.ListWebPublicationsRequest.SerializeToString,
                response_deserializer=site__pb2.ListWebPublicationsResponse.FromString,
                )


class SiteServicer(object):
    """Site API service allows to configure a remote Mintter Site.
    The server exposing this API should take care about authenticating the caller.
    """

    def CreateInviteToken(self, request, context):
        """Creates a new invite token for registering a new member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RedeemInviteToken(self, request, context):
        """Redeem a previously created invite token to register a new member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSiteInfo(self, request, context):
        """Gets public-facing site information.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSiteInfo(self, request, context):
        """Updates public-facing site information. Doesn't support partial updates,
        hence all the fields must be provided.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMembers(self, request, context):
        """Lists registered members on the site.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMember(self, request, context):
        """Gets information about a specific member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteMember(self, request, context):
        """Deletes an existing member.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBlockedAccounts(self, request, context):
        """Lists currently blocked Mintter Accounts.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """pin and publish the document to the public web site
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unpublish(self, request, context):
        """un-pin the document
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWebPublications(self, request, context):
        """list all the published documents
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SiteServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateInviteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateInviteToken,
                    request_deserializer=site__pb2.CreateInviteTokenRequest.FromString,
                    response_serializer=site__pb2.InviteToken.SerializeToString,
            ),
            'RedeemInviteToken': grpc.unary_unary_rpc_method_handler(
                    servicer.RedeemInviteToken,
                    request_deserializer=site__pb2.RedeemInviteTokenRequest.FromString,
                    response_serializer=site__pb2.RedeemInviteTokenResponse.SerializeToString,
            ),
            'GetSiteInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSiteInfo,
                    request_deserializer=site__pb2.GetSiteInfoRequest.FromString,
                    response_serializer=site__pb2.SiteInfo.SerializeToString,
            ),
            'UpdateSiteInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSiteInfo,
                    request_deserializer=site__pb2.UpdateSiteInfoRequest.FromString,
                    response_serializer=site__pb2.SiteInfo.SerializeToString,
            ),
            'ListMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMembers,
                    request_deserializer=site__pb2.ListMembersRequest.FromString,
                    response_serializer=site__pb2.ListMembersResponse.SerializeToString,
            ),
            'GetMember': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMember,
                    request_deserializer=site__pb2.GetMemberRequest.FromString,
                    response_serializer=site__pb2.Member.SerializeToString,
            ),
            'DeleteMember': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteMember,
                    request_deserializer=site__pb2.DeleteMemberRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListBlockedAccounts': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBlockedAccounts,
                    request_deserializer=site__pb2.ListBlockedAccountsRequest.FromString,
                    response_serializer=site__pb2.ListBlockedAccountsResponse.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=site__pb2.PublishRequest.FromString,
                    response_serializer=site__pb2.PublishResponse.SerializeToString,
            ),
            'Unpublish': grpc.unary_unary_rpc_method_handler(
                    servicer.Unpublish,
                    request_deserializer=site__pb2.UnpublishRequest.FromString,
                    response_serializer=site__pb2.UnpublishResponse.SerializeToString,
            ),
            'ListWebPublications': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWebPublications,
                    request_deserializer=site__pb2.ListWebPublicationsRequest.FromString,
                    response_serializer=site__pb2.ListWebPublicationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.mintter.site.v1alpha.Site', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Site(object):
    """Site API service allows to configure a remote Mintter Site.
    The server exposing this API should take care about authenticating the caller.
    """

    @staticmethod
    def CreateInviteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/CreateInviteToken',
            site__pb2.CreateInviteTokenRequest.SerializeToString,
            site__pb2.InviteToken.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RedeemInviteToken(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/RedeemInviteToken',
            site__pb2.RedeemInviteTokenRequest.SerializeToString,
            site__pb2.RedeemInviteTokenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSiteInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/GetSiteInfo',
            site__pb2.GetSiteInfoRequest.SerializeToString,
            site__pb2.SiteInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateSiteInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/UpdateSiteInfo',
            site__pb2.UpdateSiteInfoRequest.SerializeToString,
            site__pb2.SiteInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/ListMembers',
            site__pb2.ListMembersRequest.SerializeToString,
            site__pb2.ListMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/GetMember',
            site__pb2.GetMemberRequest.SerializeToString,
            site__pb2.Member.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteMember(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/DeleteMember',
            site__pb2.DeleteMemberRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBlockedAccounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/ListBlockedAccounts',
            site__pb2.ListBlockedAccountsRequest.SerializeToString,
            site__pb2.ListBlockedAccountsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/Publish',
            site__pb2.PublishRequest.SerializeToString,
            site__pb2.PublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unpublish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/Unpublish',
            site__pb2.UnpublishRequest.SerializeToString,
            site__pb2.UnpublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListWebPublications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.site.v1alpha.Site/ListWebPublications',
            site__pb2.ListWebPublicationsRequest.SerializeToString,
            site__pb2.ListWebPublicationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
