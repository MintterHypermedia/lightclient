# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from daemon.v1alpha import sites_pb2 as daemon_dot_v1alpha_dot_sites__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2


class SitesStub(object):
    """Sites API allows to configure the remote Mintter Sites inside the local app.
    To interact with the existing site, the local daemon will expose the Site API
    interface as well (see /proto/site/v1alpha/site.proto), requiring a gRPC metadata
    header with the hostname of the actual site to know the endpoint where to proxy the request.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddSite = channel.unary_unary(
                '/com.mintter.daemon.v1alpha.Sites/AddSite',
                request_serializer=daemon_dot_v1alpha_dot_sites__pb2.AddSiteRequest.SerializeToString,
                response_deserializer=daemon_dot_v1alpha_dot_sites__pb2.SiteConfig.FromString,
                )
        self.DeleteSite = channel.unary_unary(
                '/com.mintter.daemon.v1alpha.Sites/DeleteSite',
                request_serializer=daemon_dot_v1alpha_dot_sites__pb2.DeleteSiteRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListSites = channel.unary_unary(
                '/com.mintter.daemon.v1alpha.Sites/ListSites',
                request_serializer=daemon_dot_v1alpha_dot_sites__pb2.ListSitesRequest.SerializeToString,
                response_deserializer=daemon_dot_v1alpha_dot_sites__pb2.ListSitesResponse.FromString,
                )
        self.GetDocWebPublications = channel.unary_unary(
                '/com.mintter.daemon.v1alpha.Sites/GetDocWebPublications',
                request_serializer=daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsRequest.SerializeToString,
                response_deserializer=daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsResponse.FromString,
                )


class SitesServicer(object):
    """Sites API allows to configure the remote Mintter Sites inside the local app.
    To interact with the existing site, the local daemon will expose the Site API
    interface as well (see /proto/site/v1alpha/site.proto), requiring a gRPC metadata
    header with the hostname of the actual site to know the endpoint where to proxy the request.
    """

    def AddSite(self, request, context):
        """Adds a site configuration to the local app.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteSite(self, request, context):
        """Deletes the site configuration from the local app.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListSites(self, request, context):
        """Lists configured sites.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDocWebPublications(self, request, context):
        """Given a docuement, lists all the sites it's been published to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SitesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddSite': grpc.unary_unary_rpc_method_handler(
                    servicer.AddSite,
                    request_deserializer=daemon_dot_v1alpha_dot_sites__pb2.AddSiteRequest.FromString,
                    response_serializer=daemon_dot_v1alpha_dot_sites__pb2.SiteConfig.SerializeToString,
            ),
            'DeleteSite': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteSite,
                    request_deserializer=daemon_dot_v1alpha_dot_sites__pb2.DeleteSiteRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListSites': grpc.unary_unary_rpc_method_handler(
                    servicer.ListSites,
                    request_deserializer=daemon_dot_v1alpha_dot_sites__pb2.ListSitesRequest.FromString,
                    response_serializer=daemon_dot_v1alpha_dot_sites__pb2.ListSitesResponse.SerializeToString,
            ),
            'GetDocWebPublications': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDocWebPublications,
                    request_deserializer=daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsRequest.FromString,
                    response_serializer=daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.mintter.daemon.v1alpha.Sites', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Sites(object):
    """Sites API allows to configure the remote Mintter Sites inside the local app.
    To interact with the existing site, the local daemon will expose the Site API
    interface as well (see /proto/site/v1alpha/site.proto), requiring a gRPC metadata
    header with the hostname of the actual site to know the endpoint where to proxy the request.
    """

    @staticmethod
    def AddSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.daemon.v1alpha.Sites/AddSite',
            daemon_dot_v1alpha_dot_sites__pb2.AddSiteRequest.SerializeToString,
            daemon_dot_v1alpha_dot_sites__pb2.SiteConfig.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.daemon.v1alpha.Sites/DeleteSite',
            daemon_dot_v1alpha_dot_sites__pb2.DeleteSiteRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListSites(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.daemon.v1alpha.Sites/ListSites',
            daemon_dot_v1alpha_dot_sites__pb2.ListSitesRequest.SerializeToString,
            daemon_dot_v1alpha_dot_sites__pb2.ListSitesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDocWebPublications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.mintter.daemon.v1alpha.Sites/GetDocWebPublications',
            daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsRequest.SerializeToString,
            daemon_dot_v1alpha_dot_sites__pb2.GetDocWebPublicationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
