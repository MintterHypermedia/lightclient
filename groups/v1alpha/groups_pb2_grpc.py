# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from groups.v1alpha import groups_pb2 as groups_dot_v1alpha_dot_groups__pb2


class GroupsStub(object):
    """Groups service exposes the functionality for managing group entities.
    This API uses fully-qualified EID as group IDs in all the requests.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateGroup = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/CreateGroup',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
                )
        self.GetGroup = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/GetGroup',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
                )
        self.UpdateGroup = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/UpdateGroup',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.UpdateGroupRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
                )
        self.SyncGroupSite = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/SyncGroupSite',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteResponse.FromString,
                )
        self.ListMembers = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/ListMembers',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.ListMembersRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListMembersResponse.FromString,
                )
        self.ListContent = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/ListContent',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.ListContentRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListContentResponse.FromString,
                )
        self.ListGroups = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/ListGroups',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListGroupsResponse.FromString,
                )
        self.ListDocumentGroups = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/ListDocumentGroups',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsResponse.FromString,
                )
        self.ListAccountGroups = channel.unary_unary(
                '/com.seed.groups.v1alpha.Groups/ListAccountGroups',
                request_serializer=groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsRequest.SerializeToString,
                response_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsResponse.FromString,
                )


class GroupsServicer(object):
    """Groups service exposes the functionality for managing group entities.
    This API uses fully-qualified EID as group IDs in all the requests.
    """

    def CreateGroup(self, request, context):
        """Creates a new group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGroup(self, request, context):
        """Gets a group by ID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateGroup(self, request, context):
        """Updates a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncGroupSite(self, request, context):
        """Forces a sync of a group with its site.
        Only works for those groups that are published to sites.
        Could be useful to trigger the sync manually
        without having to wait for the next round of the automatic periodic sync.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMembers(self, request, context):
        """Lists members of a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListContent(self, request, context):
        """Lists content of a group.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListGroups(self, request, context):
        """Lists groups.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDocumentGroups(self, request, context):
        """Lists groups that a document is published to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListAccountGroups(self, request, context):
        """Lists groups that an account is a member of.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateGroup,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.CreateGroupRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.Group.SerializeToString,
            ),
            'GetGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGroup,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.GetGroupRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.Group.SerializeToString,
            ),
            'UpdateGroup': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateGroup,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.UpdateGroupRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.Group.SerializeToString,
            ),
            'SyncGroupSite': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncGroupSite,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteResponse.SerializeToString,
            ),
            'ListMembers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListMembers,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListMembersRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.ListMembersResponse.SerializeToString,
            ),
            'ListContent': grpc.unary_unary_rpc_method_handler(
                    servicer.ListContent,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListContentRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.ListContentResponse.SerializeToString,
            ),
            'ListGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListGroups,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListGroupsRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.ListGroupsResponse.SerializeToString,
            ),
            'ListDocumentGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDocumentGroups,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsResponse.SerializeToString,
            ),
            'ListAccountGroups': grpc.unary_unary_rpc_method_handler(
                    servicer.ListAccountGroups,
                    request_deserializer=groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsRequest.FromString,
                    response_serializer=groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.seed.groups.v1alpha.Groups', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Groups(object):
    """Groups service exposes the functionality for managing group entities.
    This API uses fully-qualified EID as group IDs in all the requests.
    """

    @staticmethod
    def CreateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/CreateGroup',
            groups_dot_v1alpha_dot_groups__pb2.CreateGroupRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/GetGroup',
            groups_dot_v1alpha_dot_groups__pb2.GetGroupRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateGroup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/UpdateGroup',
            groups_dot_v1alpha_dot_groups__pb2.UpdateGroupRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncGroupSite(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/SyncGroupSite',
            groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.SyncGroupSiteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/ListMembers',
            groups_dot_v1alpha_dot_groups__pb2.ListMembersRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.ListMembersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/ListContent',
            groups_dot_v1alpha_dot_groups__pb2.ListContentRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.ListContentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/ListGroups',
            groups_dot_v1alpha_dot_groups__pb2.ListGroupsRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.ListGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListDocumentGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/ListDocumentGroups',
            groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.ListDocumentGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListAccountGroups(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.seed.groups.v1alpha.Groups/ListAccountGroups',
            groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsRequest.SerializeToString,
            groups_dot_v1alpha_dot_groups__pb2.ListAccountGroupsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
